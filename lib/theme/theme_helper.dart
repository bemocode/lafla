import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:lafla/core/utils/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onError.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.gray5002,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(14.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray5002,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray30001,
          fontSize: 16.fSize,
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 14.fSize,
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray40002,
          fontSize: 12.fSize,
          fontFamily: 'SF UI Display',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 34.fSize,
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 32.fSize,
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w600,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 28.fSize,
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 24.fSize,
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 13.fSize,
          fontFamily: 'Circular Std',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray800,
          fontSize: 11.fSize,
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray300,
          fontSize: 20.fSize,
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 18.fSize,
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onError.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Plus Jakarta Sans',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFF3F8FA),
    primaryContainer: Color(0XFF40464D),
    secondaryContainer: Color(0XFFE7E9F2),

    // Error colors
    errorContainer: Color(0XFF97A1F1),
    onError: Color(0X33FFFFFF),
    onErrorContainer: Color(0XFF1B1E28),

    // On colors(text colors)
    onPrimary: Color(0XFF362F34),
    onPrimaryContainer: Color(0X99000C07),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber200 => Color(0XFFFADB94);
  Color get amber300 => Color(0XFFFFC746);

  // Black
  Color get black90099 => Color(0X99050C09);
  Color get black900A5 => Color(0XA5000000);

  // Blue
  Color get blue50 => Color(0XFFE5F4FF);
  Color get blue5001 => Color(0XFFD1E6FF);
  Color get blueA200 => Color(0XFF437EFF);

  // BlueGray
  Color get blueGray200 => Color(0XFFB9BED7);
  Color get blueGray20001 => Color(0XFFB3BECD);
  Color get blueGray30033 => Color(0X338A9EB8);
  Color get blueGray400 => Color(0XFF808B9A);
  Color get blueGray40001 => Color(0XFF7D848D);
  Color get blueGray40002 => Color(0XFF7C838D);

  // Gray
  Color get gray300 => Color(0XFFD9DFE6);
  Color get gray30001 => Color(0XFFDBE7E6);
  Color get gray400 => Color(0XFFB8B9C1);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray5001 => Color(0XFFF5F8FB);
  Color get gray5002 => Color(0XFFF7F7F9);
  Color get gray600 => Color(0XFF797C7B);
  Color get gray60019 => Color(0X197B7373);
  Color get gray700 => Color(0XFF5E5F6B);
  Color get gray800 => Color(0XFF3A3A40);
  Color get gray80001 => Color(0XFF363F3B);
  Color get gray900 => Color(0XFF242331);
  Color get gray90001 => Color(0XFF111113);
  Color get gray90002 => Color(0XFF111314);

  // Green
  Color get green800 => Color(0XFF19B000);

  // Indigo
  Color get indigoA100 => Color(0XFF7E92F8);
  Color get indigoA10019 => Color(0X197483F4);
  Color get indigoA200 => Color(0XFF6972F0);

  // Lime
  Color get lime800 => Color(0XFF87A415);

  // Pink
  Color get pink100 => Color(0XFFF5B7BD);

  // Red
  Color get red600 => Color(0XFFE93635);

  // Yellow
  Color get yellow600 => Color(0XFFFFD336);
  Color get yellow900 => Color(0XFFD1950C);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
